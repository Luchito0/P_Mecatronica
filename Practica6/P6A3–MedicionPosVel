#include <Arduino.h>

#define EncA 19
#define EncB 18
#define ENA 21
#define IN4 22
#define IN3 23

// Velocidad del motor
int speed_lev = 10;  // 10% de la velocidad máxima
int speed_med = 30;  // 30% de la velocidad máxima
int speed_alt = 50;  // 50% de la velocidad máxima
int speed_max = 255;  // 100% de la velocidad máxima

// Posición angular anterior
float angle_prev = 0.0;

volatile long pulses = 0;
int direction = 1;  // 1 para sentido levógiro, -1 para sentido dextrógiro
unsigned long startTime = 0;

void IRAM_ATTR PulsesCounter() {
  if (digitalRead(EncB) == HIGH) {
    pulses += direction;
  } else {
    pulses -= direction;
  }
}

void setup() {
  pinMode(EncA, INPUT);
  pinMode(EncB, INPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(IN3, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(EncA), PulsesCounter, RISING);

  Serial.begin(115200);

  // Configuración inicial para el motor
  analogWrite(ENA, 255);  // Establece velocidad máxima
  digitalWrite(IN4, LOW); // Sentido levógiro
  digitalWrite(IN3, HIGH);
}

void loop() {
  unsigned long currentTime = millis();

  if (currentTime - startTime < 3000) {
    analogWrite(ENA, speed_lev);
  } else if (currentTime - startTime < 5000) {
    analogWrite(ENA, speed_med);
  } else if (currentTime - startTime < 8000) {
    analogWrite(ENA, speed_alt);
  } else if (currentTime - startTime < 10000) {
    analogWrite(ENA, speed_max);
  } else {
    startTime = currentTime;
  }

  // Lectura de la posición angular
  float angle = pulses * 360.0 / (2 * 120.0);

  // Cálculo de la velocidad angular
  float dt = micros() - startTime;
  float w = (angle - angle_prev) / dt;

  // Impresión de los valores
  Serial.print("Pulsos: ");
  Serial.print(pulses);
  Serial.print(" --- Ángulo: ");
  Serial.print(angle);
  Serial.print("° --- W: ");
  Serial.print(w, 2);
  Serial.print(" [rps] --- ");
  Serial.print(w * 60.0, 2);
  Serial.print(" [rpm] --- ");
  Serial.print(w * 2 * M_PI, 2);
  Serial.println(" [rad/s]");

  // Actualización del valor de la posición angular anterior
  angle_prev = angle;
}
